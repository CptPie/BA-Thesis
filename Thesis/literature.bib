%% This BibTeX bibliography file was created using BibDesk.
%% http://bibdesk.sourceforge.net/

%% Created for dh at 2020-03-06 11:02:56 +0100 


%% Saved with string encoding Unicode (UTF-8) 

@article{mccarthy1960,
  author = {McCarthy, John},
  title = {Recursive functions of symbolic expressions and their computation by
           machine, Part I},
  year = {1960},
  issue_date = {April 1960},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {3},
  number = {4},
  issn = {0001-0782},
  url = {https://doi.org/10.1145/367177.367199},
  doi = {10.1145/367177.367199},
  journal = {Commun. ACM},
  month = apr,
  pages = {184–195},
  numpages = {12},
}

@article{Dakin1973,
  title = {A Mixed Code Approach},
  author = {R. J. Dakin and Peter C. Poole},
  journal = {Comput. J.},
  year = {1973},
  volume = {16},
  pages = {219-222},
  url = {https://api.semanticscholar.org/CorpusID:45699429},
}

@article{Dawson1973,
  title = {Combining Interpretive Code with Machine Code},
  author = {John L. Dawson},
  journal = {Comput. J.},
  year = {1973},
  volume = {16},
  pages = {216-219},
  url = {https://api.semanticscholar.org/CorpusID:35418732},
}

@inproceedings{10.1145/29650.29666,
  author = {Pittman, T.},
  title = {Two-level hybrid interpreter/native code execution for combined
           space-time program efficiency},
  year = {1987},
  isbn = {0897912357},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/29650.29666},
  doi = {10.1145/29650.29666},
  abstract = {A two-level programming model permits the applications programmer
              to write programs that benefit both from the code density of
              interpreted virtual machines and from the speed of native code
              execution. A well-defined boundary between the native code and the
              virtual machine facilitates the development of translators to be
              used at both levels.},
  booktitle = {Papers of the Symposium on Interpreters and Interpretive
               Techniques},
  pages = {150–152},
  numpages = {3},
  location = {St. Paul, Minnesota, USA},
  series = {SIGPLAN '87},
}

@article{Pittman1987,
  author = {Pittman, T.},
  title = {Two-level hybrid interpreter/native code execution for combined
           space-time program efficiency},
  year = {1987},
  issue_date = {July 1987},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {22},
  number = {7},
  issn = {0362-1340},
  url = {https://doi.org/10.1145/960114.29666},
  doi = {10.1145/960114.29666},
  abstract = {A two-level programming model permits the applications programmer
              to write programs that benefit both from the code density of
              interpreted virtual machines and from the speed of native code
              execution. A well-defined boundary between the native code and the
              virtual machine facilitates the development of translators to be
              used at both levels.},
  journal = {SIGPLAN Not.},
  month = jul,
  pages = {150–152},
  numpages = {3},
}

@article{Brown1976,
  title = {Throw‐away compiling},
  author = {Peter J. Brown},
  journal = {Software: Practice and Experience},
  year = {1976},
  volume = {6},
  url = {https://api.semanticscholar.org/CorpusID:8385654},
}

@inproceedings{Hansen1974,
  title = {Adaptive systems for the dynamic run-time optimization of programs.},
  author = {Gilbert J. Hansen},
  year = {1974},
  url = {https://api.semanticscholar.org/CorpusID:62624731},
}

@article{Deutsch1984,
  title = {Efficient implementation of the smalltalk-80 system},
  author = {L Peter Deutsch and Allan M. Schiffman},
  journal = {Proceedings of the 11th ACM SIGACT-SIGPLAN symposium on Principles
             of programming languages},
  year = {1984},
  url = {https://api.semanticscholar.org/CorpusID:3045432},
}

  @article{aycock2003,
  author = {Aycock, John},
  title = {A brief history of just-in-time},
  year = {2003},
  issue_date = {June 2003},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {35},
  number = {2},
  issn = {0360-0300},
  url = {https://doi.org/10.1145/857076.857077},
  doi = {10.1145/857076.857077},
  abstract = {Software systems have been using "just-in-time" compilation (JIT)
              techniques since the 1960s. Broadly, JIT compilation includes any
              translation performed dynamically, after a program has started
              execution. We examine the motivation behind JIT compilation and
              constraints imposed on JIT compilation systems, and present a
              classification scheme for such systems. This classification emerges
              as we survey forty years of JIT work, from 1960--2000.},
  journal = {ACM Comput. Surv.},
  month = jun,
  pages = {97–113},
  numpages = {17},
  keywords = {dynamic compilation, Just-in-time compilation},
}

@book{uom1964,
  title = {University of Michigan Executive System for the IBM 7090 Computer},
  author = {University of Michigan Computing Center},
  number = {Bd. 1},
  series = {University of Michigan Executive System for the IBM 7090 Computer},
  url = {https://books.google.de/books?id=B9BWAAAAMAAJ},
  year = {1964},
  publisher = {UM Libraries},
}

  @misc{Keller2021,
  author = {Rochus Keller},
  title = {Smalltalk},
  year = {2021},
  publisher = {GitHub},
  journal = {GitHub repository},
  howpublished = {\url{https://github.com/rochus-keller/Smalltalk}},
  commit = {7c163901baf5013994ce0409345c294c3087cb6b},
}
